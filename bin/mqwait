#!/usr/bin/env python3

# Script to more easily submit jobs to the QUT HPC queuing system

__author__ = "Peter Sternes"
__copyright__ = "Copyright 2021"
__credits__ = ["Peter Sternes"]
__license__ = "GPL3"
__maintainer__ = "Peter Sternes"
__email__ = "peter.sternes near qut.edu.au"
__status__ = "Development"

import argparse
from argparse import RawTextHelpFormatter
import subprocess
import getpass
import time
import sys
from smtplib import SMTP
from time import strftime
import json
import os

def run(command, stdin=None):
    '''
    Run a subprocess.check_output() with the given command with
    'bash -c command'
    returning the stdout. If the command fails (i.e. has a non-zero exitstatus),
    raise a ExternCalledProcessError that includes the $stderr as part of
    the error message
    Parameters
    ----------
    command: str
        command to run
    stdin: str or None
        stdin to be provided to the process, to subprocess.communicate.
    Returns
    -------
    Standard output of the run command
    Exceptions
    ----------
    extern.ExternCalledProcessError including stdout and stderr of the run
    command should it return with non-zero exit status.
    Parameters
    ----------
    command : TYPE
        DESCRIPTION.
    stdin : TYPE, optional
        DESCRIPTION. The default is None.
    Raises
    ------
    ExternCalledProcessError
        DESCRIPTION.
    Returns
    -------
    stdout : TYPE
        DESCRIPTION.
    '''
    #logging.debug("Running extern cmd: %s" % command)

    using_stdin = stdin is not None
    process = process = subprocess.Popen(
        ["bash",'-o','pipefail',"-c", command],
        stdin= (subprocess.PIPE if using_stdin else None),
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate(stdin)

    if process.returncode != 0:
        raise ExternCalledProcessError(process, command, stdout.decode(), stderr.decode())
    return stdout

class ExternCalledProcessError(subprocess.CalledProcessError):
    def __init__(self, completed_process, command, stdout, stderr):
        self.command = command
        self.returncode = completed_process.returncode
        self.stderr = stderr
        self.stdout = stdout
        self.completed_process = completed_process

    def __str__(self):
        return "Command %s returned non-zero exit status %i.\n"\
            "STDERR was: %sSTDOUT was: %s" % (
                self.command,
                self.returncode,
                self.stderr,
                self.stdout)

class PbsJobInfo:
    @staticmethod
    def current_jobs():
        return run('qstat -f -u `whoami` -a | tail -n +6 | column -t | awk \'{print $1}\'').decode().splitlines()

    @staticmethod
    def all_jobs():
        return run('qstat -f -u `whoami` -a | tail -n +6 | column -t | awk \'{print $1}\'').decode().splitlines()

    @staticmethod
    def all_names_user():
        return run('qstat -f -u `whoami` -a | tail -n +6 | column -t | awk \'{print $4}\'').decode().splitlines()

#%%parse
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='''
      _ __ ___   __ ___      ____ _(_) |_
     | '_ ` _ \\ / _` \\ \\ /\\ / / _` | | __|
     | | | | | | (_| |\\ V  V / (_| | | |_
     |_| |_| |_|\\__, | \\_/\\_/ \\__,_|_|\\__|
                   |_|

    Typing 'mqwait' will email you once all your currently queued jobs finish.

    Alternatively, you can:
        (1) specify a file containing a list of PBS job IDs you wish to be notified by once they finish.
        (2) pipe a series of mqsub jobs into mqwait by appending '|& mqsub -m'. It parses STDERR so must be piped using \'|&\' and mqsub must also be run in the background using \'--bg\'.
            Must be a single command encompassing multiple mqsub commands, or a series of commands executed in a single script.
            i.e. \'parallel mqsub --no-email --bg ... |& mqwait -m\'
                 \'mqsub_jobs.sh |& mqwait -m\'

    ''',formatter_class=RawTextHelpFormatter)
    parser.add_argument('-i', help='Input file containing a newline separated list of PBS job names (i.e. 123456.pbs), or "-" to read from STDIN', required=False, dest='i', metavar='file')
    parser.add_argument('-p', help='Polling rate (in seconds) [default = 60]',  default=60.0, dest='p', metavar='secs', type=int)
    parser.add_argument('-l', help='Verbosely displays the number of remaining jobs. Controlled by the polling rate (-p)', action='store_true', default=False, dest='l')
    parser.add_argument('-m', help='Takes piped output from mqsub and waits on those jobs.', action='store_true', default=False, dest='m')
    args = parser.parse_args()

    #%% check and get job lists
    while True:
        try:
            current_jobs = PbsJobInfo.current_jobs()
            all_jobs = PbsJobInfo.all_jobs()            
            if len(current_jobs) == 0:
                print('None of your jobs appear to be running')
                sys.exit(0)
            else:
                print("Found {} job(s), in total.".format(len(all_jobs)))

            if args.m is True and args.i is None:
                output = subprocess.getoutput("grep 'INFO: qsub stdout was:'").splitlines()
                all_jobs=[i.split()[7] for i in output]
                all_names=[]
                for i in all_jobs:
                    cmd = 'qstat -r ' + i + ' | tail -n +6 | column -t | awk \'{print $4}\''
                    name = run(cmd).decode().splitlines()
                    all_names += name
                print('Adding the following mqsub jobs to mqwait: ' + ' '.join(all_jobs))
                print('Corresponding to the following job names: ' + ' '.join(all_names))
            elif args.m is True and args.i is not None:
                print('WARNING. -m and -i cannot be specified at the same time. Exiting')
                sys.exit()
            elif args.i is None:
                all_jobs = PbsJobInfo.all_jobs()
                all_names = PbsJobInfo.all_names_user()
            elif args.i is not None:
                input_file = args.i
                if input_file == '-':
                    print('Reading from stdin...')
                    all_jobs = sys.stdin.read().splitlines()
                else:
                    with open(input_file) as file:
                        all_jobs = file.read().splitlines()
                all_jobs = list(filter(str.strip, all_jobs))
                print('-i specified, mqwait will notify when those {} jobs complete...'.format(len(all_jobs)))

                all_names=[]
                for i in all_jobs:
                    cmd = 'qstat -x -r ' + i + ' | tail -n +6 | column -t | awk \'{print $4}\''
                    name = run(cmd).decode().splitlines()
                    all_names += name
            break
        except ExternCalledProcessError as e:
            print('Server issues may be occuring. Sleeping for 2 min...')
            time.sleep(120)

    # %% run qstat every arg.p seconds to compare lists
    starttime = time.time()
    while True:
        current_jobs = PbsJobInfo.current_jobs()
        if args.l is True:
            total_job_number = str(len(all_jobs))
            all_jobs_set = set(all_jobs)
            remaining_jobs = all_jobs_set.intersection(current_jobs)
            remaining_jobs_number = str(len(remaining_jobs))
            msg = 'mqwait: ' + remaining_jobs_number + ' out of ' + total_job_number + ' jobs remaining'
            print(strftime("%Y-%m-%d %H:%M:%S") + '\t' + msg)
            sys.stdout.flush()
        if any(i in current_jobs for i in all_jobs):
            None
        else:
            print('mqwait: All PBS jobs complete')
            status_list=[]
            for job_id in all_jobs:
                try:
                    status=str(json.loads(run("qstat -x -f {} -F json".format(job_id)).decode())['Jobs'][job_id]['Exit_status'])
                except KeyError:
                    status='no_exit_status'
                status_list += status.splitlines()
                exit_0 = str(status_list.count('0'))
                status_total = str(len(status_list))
            with SMTP(host='localhost',port=0) as smtp:
                smtp.sendmail('CMR_HPC','{}@qut.edu.au'.format(getpass.getuser()),'Subject: mqwait has finished\n\nThe following PBS job(s) completed:\n{}\n\nCorresponding with the following job name(s):\n{}\n\n{} out of {} jobs finished successfully with an exit status 0'.format('\n'.join(all_jobs),'\n'.join(all_names),'\n'.join(exit_0),'\n'.join(status_total)))
            break
        time.sleep(args.p - ((time.time() - starttime) % args.p))

