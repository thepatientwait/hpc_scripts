#!/usr/bin/env python3
import os
import sys
import subprocess
import argparse

from snakemake.utils import read_job_properties

## Code below copied from the extern python package. Copy the code here so there are no dependencies.

def run(command, stdin=None):
    '''
    Run a subprocess.check_output() with the given command with
    'bash -c command'
    returning the stdout. If the command fails (i.e. has a non-zero exitstatus),
    raise a ExternCalledProcessError that includes the $stderr as part of
    the error message

    Parameters
    ----------
    command: str
        command to run
    stdin: str or None
        stdin to be provided to the process, to subprocess.communicate.

    Returns
    -------
    Standard output of the run command

    Exceptions
    ----------
    extern.ExternCalledProcessError including stdout and stderr of the run
    command should it return with non-zero exit status.
    '''
    #logging.debug("Running extern cmd: %s" % command)

    using_stdin = stdin is not None
    process = process = subprocess.Popen(
        ["bash",'-o','pipefail',"-c", command],
        stdin= (subprocess.PIPE if using_stdin else None),
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate(stdin)

    if process.returncode != 0:
        raise ExternCalledProcessError(process, command, stdout.decode(), stderr.decode())
    return stdout

#%% CLASSES ##########
######################

class ExternCalledProcessError(subprocess.CalledProcessError):
    def __init__(self, completed_process, command, stdout, stderr):
        self.command = command
        self.returncode = completed_process.returncode
        self.stderr = stderr
        self.stdout = stdout
        self.completed_process = completed_process

    def __str__(self):
        return "Command %s returned non-zero exit status %i.\n"\
            "STDERR was: %sSTDOUT was: %s" % (
                self.command,
                self.returncode,
                self.stderr,
                self.stdout)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='snakemake submission script for lyra cluster')

    parser.add_argument('--queue', help='Queue to submit to [default = mqsub default]')
    parser.add_argument('--segregated-log-files', action='store_true', help='Put log files in ~/qsub_logs/<date>/<directory> instead of the current working directory.')
    parser.add_argument('--depend', help='Space separated list of ids for jobs this job should depend on.')
    # --dry-run
    parser.add_argument('--dry-run', action='store_true')
    parser.add_argument('jobscript', help='Script to submit')

    args = parser.parse_args()

    jobscript = args.jobscript
    job_properties = read_job_properties(jobscript)

    threads = job_properties['threads']
    if 'mem_mb' in job_properties['resources'] and job_properties['resources']['mem_mb'] != '<TBD>':
        mem_mb = job_properties['resources']['mem_mb']
        mem_gb = int(mem_mb / 1024)
        if mem_gb < 1:
            mem_gb = 1
        mem_argument = "-m {}".format(mem_gb)
    else:
        mem_argument = ''

    if 'runtime' in job_properties['resources'] and job_properties['resources']['runtime'] != '<TBD>':
        runtime_mins = job_properties['resources']['runtime'] # Fails with snakemake == 7.16.0, but works with 7.30.1
        runtime_hours = "--hours {}".format(int(runtime_mins / 60))
    else:
        runtime_hours = ''

    if 'queue' in job_properties['resources']:
        queue = '-q '+job_properties['resources']['queue']
    elif args.queue:
        queue = '-q '+args.queue
    else:
        queue = ''

    if 'segregated_log_files' in job_properties['resources'] or args.segregated_log_files:
        segregated_log_files_arg = '--segregated-log-files'
    else:
        segregated_log_files_arg = ''

    gpu_arg = ''
    if 'gpu_type' in job_properties['resources']:
        gpu_type = job_properties['resources']['gpu_type']
        if gpu_type in ['A100', 'H100']:
            gpu_arg += ' --{}'.format(gpu_type)
        else:
            raise ValueError("gpu_type {} not supported".format(gpu_type))
    elif 'gpus' in job_properties['resources']:
        gpus = job_properties['resources']['gpus']
        if gpus > 0:
            gpu_arg = '--gpu {}'.format(gpus)

    if 'extra_mqsub_args' in job_properties['resources']:
        extra_mqsub_args = job_properties['resources']['extra_mqsub_args']
    else:
        extra_mqsub_args = ''

    if args.depend:
        depend = '--depend ' + args.depend
    else:
        depend = ''

    # Change the name because otherwise 'snakemake' takes all the characters on screen
    # But currently mqsub ignores this anyway, so definiting --name has no effect.
    job_name = os.path.basename(jobscript).replace('snakemake','')

    mqsub_command = 'mqsub'

    cmd = "{mqsub_command} --no-email --quiet --bg --name {job_name} -t {threads} {mem} {gpu_arg} {hours} --script {script} {queue} {depend} {segregated_log_files_arg} {extra_mqsub_args} 2>&1".format(
        mqsub_command=mqsub_command,
        job_name=job_name, extra_mqsub_args=extra_mqsub_args,
        threads=threads, script=jobscript, mem=mem_argument, hours=runtime_hours, queue=queue, 
        depend=depend, segregated_log_files_arg=segregated_log_files_arg,
        gpu_arg=gpu_arg)

    if args.dry_run:
        print(cmd)
        sys.exit(1) # exit 1 so that if this is through an actual snakemake run it quits immediately
    else:
        mqsub_stdout = run(cmd)
        
        # Print the pbs ID as expected by snakemake
        correct_line = [line for line in mqsub_stdout.decode().split('\n') if line.startswith('qsub stdout: ')]
        if len(correct_line) != 1:
            raise ValueError("mqsub returned unexpected output: {}".format(mqsub_stdout.decode()))
        else:
            print(correct_line[0].strip().replace('qsub stdout: ',''))
